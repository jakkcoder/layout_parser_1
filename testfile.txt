import time
import multiprocessing

def cpu_bound_task(start, end):
    """A CPU-bound task that computes the sum of squares."""
    total = 0
    for i in range(start, end):
        total += i * i
    return total

def parallel_execution(num_iterations):
    """Executes the CPU-bound task using multiprocessing.Pool."""
    start_time = time.time()
    num_processes = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(processes=num_processes)
    chunk_size = num_iterations // num_processes

    results = []
    for i in range(num_processes):
        start = i * chunk_size
        end = min(start + chunk_size, num_iterations)
        results.append(pool.apply_async(cpu_bound_task, args=(start, end)))

    pool.close()
    pool.join()

    total_result = sum(result.get() for result in results)
    end_time = time.time()
    return end_time - start_time

def sequential_execution(num_iterations):
    """Executes the CPU-bound task sequentially."""
    start_time = time.time()
    for _ in range(num_iterations):
        cpu_bound_task(0, 10000)  # Adjust the parameter based on task complexity
    end_time = time.time()
    return end_time - start_time

if __name__ == "__main__":
    num_iterations = 1000  # Number of iterations of the CPU-bound task

    # Measure time taken for sequential execution
    sequential_time = sequential_execution(num_iterations)
    print(f"Sequential Execution Time: {sequential_time} seconds")

    # Measure time taken for parallel execution
    parallel_time = parallel_execution(num_iterations)
    print(f"Parallel Execution Time: {parallel_time} seconds")
