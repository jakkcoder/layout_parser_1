import unittest
from unittest.mock import MagicMock, patch
import pandas as pd
from datetime import datetime, timezone
from google.cloud import bigquery
from airflow.models import Variable
from airflow.providers.google.cloud.hooks.bigquery import BigQueryHook

# Import functions from each file
from core.combined.data_handlers.builtwith import *
from core.combined.data_handlers.common import *
from core.combined.data_handlers.helper import *

class TestBuiltWith(unittest.TestCase):

    @patch('core.combined.data_handlers.builtwith.get_variable')
    @patch('core.combined.data_handlers.builtwith.initialize_logging')
    def test_get_jwt_token(self, mock_initialize_logging, mock_get_variable):
        # Mock logging and get_variable()
        mock_initialize_logging.return_value = MagicMock()
        mock_get_variable.return_value = 'mock_jwt_token'

        # Call the function
        result = builtwith.get_jwt_token()

        # Assertions
        self.assertEqual(result, 'mock_jwt_token')
        mock_get_variable.assert_called_once_with('builtwith_token')

    @patch('core.combined.data_handlers.builtwith.get_variable')
    @patch('core.combined.data_handlers.builtwith.initialize_logging')
    def test_create_prospect_payload(self, mock_initialize_logging, mock_get_variable):
        # Mock logging and get_variable()
        mock_initialize_logging.return_value = MagicMock()
        mock_get_variable.return_value = pd.DataFrame({'domain': ['example.com', 'example.org']})

        # Call the function
        result = builtwith.create_prospect_payload(ti=MagicMock())

        # Assertions
        self.assertIsInstance(result, list)
        self.assertEqual(result, ['example.com', 'example.org'])

    # Add more tests for functions in builtwith.py as needed

class TestCommon(unittest.TestCase):

    @patch('core.combined.data_handlers.common.Variable.get')
    @patch('core.combined.data_handlers.common.initialize_logging')
    def test_fetch_prospect_data(self, mock_initialize_logging, mock_variable_get):
        # Mock logging and Variable.get()
        mock_initialize_logging.return_value = MagicMock()
        mock_variable_get.return_value = '2023-01-01'  # Mocking zoominfo_lookback_utc variable
        mock_BQhook_instance = MagicMock()
        mock_BQhook_instance.get_pandas_df.return_value = pd.DataFrame({
            'domain': ['example1.com', 'example2.com'],
            'user_id': [1, 2]
        })
        with patch('core.combined.data_handlers.common.get_BQhook', return_value=mock_BQhook_instance):
            # Call the function
            result = fetch_prospect_data()

        # Assertions
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(result.shape[0], 2)  # Check if two rows are returned

    @patch('core.combined.data_handlers.common.BigQueryHook')
    @patch('core.combined.data_handlers.common.initialize_logging')
    def test_fetch_users_data(self, mock_initialize_logging, mock_BigQueryHook):
        # Mock logging and BigQueryHook
        mock_initialize_logging.return_value = MagicMock()
        mock_hook_instance = MagicMock(spec=BigQueryHook)
        mock_hook_instance.get_pandas_df.return_value = pd.DataFrame({
            'url': ['https://example1.com', 'https://example2.com'],
            'company': ['Company 1', 'Company 2']
        })
        with patch('core.combined.data_handlers.common.get_BQhook', return_value=mock_hook_instance):
            # Call the function
            result = fetch_users_data(dag_run=MagicMock(conf={"interval_days": 30}))

        # Assertions
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(result.shape[0], 2)  # Check if two rows are returned
        self.assertIn('source_url', result.columns)  # Check if column name is changed

    # Add more tests for functions in common.py as needed

class TestHelper(unittest.TestCase):

    @patch('core.combined.data_handlers.helper.Variable.get')
    @patch('core.combined.data_handlers.helper.initialize_logging')
    def test_get_variable(self, mock_initialize_logging, mock_variable_get):
        # Mock logging and Variable.get()
        mock_initialize_logging.return_value = MagicMock()
        mock_variable_get.return_value = 'mock_variable_value'

        # Call the function
        result = get_variable('mock_key')

        # Assertions
        self.assertEqual(result, 'mock_variable_value')
        mock_variable_get.assert_called_once_with('mock_key')

    @patch('core.combined.data_handlers.helper.BigQueryHook')
    @patch('core.combined.data_handlers.helper.initialize_logging')
    def test_get_BQhook(self, mock_initialize_logging, mock_BigQueryHook):
        # Mock logging and BigQueryHook
        mock_initialize_logging.return_value = MagicMock()
        mock_hook_instance = MagicMock(spec=BigQueryHook)
        mock_BigQueryHook.return_value = mock_hook_instance

        # Call the function
        result = get_BQhook()

        # Assertions
        self.assertEqual(result, mock_hook_instance)
        mock_BigQueryHook.assert_called_once_with(impersonation_chain=CONFIG['common']["GCP_SA"])

    def test_get_timestamp(self):
        # Call the function
        result = get_timestamp()

        # Assertions
        self.assertIsInstance(result, str)
        self.assertRegex(result, r"\d{4}_\d{2}_\d{2}_\d{2}_\d{2}_\d{2}")

    @patch('core.combined.data_handlers.helper.get_BQhook')
    def test_drop_temp_table(self, mock_get_BQhook):
        # Mock get_BQhook()
        mock_get_client = MagicMock()
        mock_get_BQhook.return_value.get_client.return_value = mock_get_client
        mock_get_client.query.return_value = MagicMock()

        # Call the function
        drop_temp_table('mock_project', 'mock_dataset', 'mock_temp_table')

        # Assertions
        mock_get_client.query.assert_called_once()

    @patch('core.combined.data_handlers.helper.get_BQhook')
    def test_create_temptable(self, mock_get_BQhook):
        # Mock get_BQhook()
        mock_get_client = MagicMock()
        mock_get_BQhook.return_value.get_client.return_value = mock_get_client
        mock_get_client.query.return_value = MagicMock()

        # Call the function
        create_temptable('mock_temp_table_id', 'mock_main_table_id')

        # Assertions
        mock_get_client.query.assert_called_once()

    @patch('core.combined.data_handlers.helper.Variable.set')
    @patch('core.combined.data_handlers.helper.initialize_logging')
    def test_set_variables(self, mock_initialize_logging, mock_variable_set):
        # Mock logging and Variable.set()
        mock_initialize_logging.return_value = MagicMock()

        # Call the function
        set_variables('mock_variable_name', 'mock_value')

        # Assertions
        mock_variable_set.assert_called_once_with('mock_variable_name', 'mock_value')

    # Add more tests for functions in helper.py as needed

if __name__ == '__main__':
    unittest.main()

