
import unittest
from unittest.mock import Mock
from app.service.domain.recommendations.items import Item
from app.service.post_filtering.post_filter import PostFilter, PostFilterChain

class TestPostFilter(unittest.TestCase):
    def setUp(self):
        # Create mock items
        self.item1 = Mock(spec=Item, item_id=1)
        self.item2 = Mock(spec=Item, item_id=2)
        self.item3 = Mock(spec=Item, item_id=3)
        self.items = [self.item1, self.item2, self.item3]

        # Create a PostFilter with non-permitted items
        self.non_permitted_filter = PostFilter(non_permitted_items_list=[self.item1])

    def test_filter_removes_non_permitted_items(self):
        filtered_items = self.non_permitted_filter.filter(self.items)
        self.assertNotIn(self.item1, filtered_items)
        self.assertIn(self.item2, filtered_items)
        self.assertIn(self.item3, filtered_items)

class TestPostFilterChain(unittest.TestCase):
    def setUp(self):
        # Create mock items
        self.item1 = Mock(spec=Item, item_id=1)
        self.item2 = Mock(spec=Item, item_id=2)
        self.item3 = Mock(spec=Item, item_id=3)
        self.items = [self.item1, self.item2, self.item3]

        # Create mock PostFilters
        self.filter1 = Mock(spec=PostFilter)
        self.filter1.filter.return_value = [self.item2, self.item3]

        self.filter2 = Mock(spec=PostFilter)
        self.filter2.filter.return_value = [self.item3]

        # Create a PostFilterChain and add filters
        self.chain = PostFilterChain(post_filters=[self.filter1])
        self.chain.add_post_filter(self.filter2)

    def test_chain_executes_all_filters(self):
        filtered_items = self.chain.post_filter(self.items)
        self.assertEqual(filtered_items, [self.item3])

    def test_add_post_filter(self):
        new_filter = Mock(spec=PostFilter)
        self.chain.add_post_filter(new_filter)
        self.assertIn(new_filter, self.chain.post_filters)

if __name__ == "__main__":
    unittest.main()
