
import json
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator
from airflow.models import Variable
from airflow.utils.task_group import TaskGroup
from airflow.utils.dates import days_ago
from datetime import timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'multi_api_pipeline',
    default_args=default_args,
    description='A pipeline that handles multiple APIs based on Airflow variables',
    schedule_interval=timedelta(days=1),
    start_date=days_ago(1),
    tags=['example'],
)

def get_jwt_token(api_name):
    print(f"Getting JWT token for {api_name}")

def fetch_data_from_bq(api_name):
    print(f"Fetching data from BQ for {api_name}")

def create_payload(api_name):
    print(f"Creating payload for {api_name}")

def fetch_data_from_api(api_name):
    print(f"Fetching data from {api_name} API")

def insert_data_to_bq(api_name):
    print(f"Inserting data to BQ for {api_name}")

# Load the API config from Airflow variables
api_config = json.loads(Variable.get("api_config"))

start = DummyOperator(task_id='start', dag=dag)
end = DummyOperator(task_id='end', dag=dag)

for api, settings in api_config.items():
    if settings['enabled']:
        with TaskGroup(api) as tg:
            get_token_task = PythonOperator(
                task_id=f'create_jwt_token_{api}',
                python_callable=get_jwt_token,
                op_kwargs={'api_name': api},
                dag=dag,
            )

            query_bq_task = PythonOperator(
                task_id=f'query_data_from_bq_{api}',
                python_callable=fetch_data_from_bq,
                op_kwargs={'api_name': api},
                dag=dag,
            )

            create_payload_task = PythonOperator(
                task_id=f'create_payload_{api}',
                python_callable=create_payload,
                op_kwargs={'api_name': api},
                dag=dag,
            )

            fetch_api_data_task = PythonOperator(
                task_id=f'fetch_data_from_api_{api}',
                python_callable=fetch_data_from_api,
                op_kwargs={'api_name': api},
                dag=dag,
            )

            insert_bq_task = PythonOperator(
                task_id=f'insert_data_to_bq_{api}',
                python_callable=insert_data_to_bq,
                op_kwargs={'api_name': api},
                dag=dag,
            )

            get_token_task >> query_bq_task >> create_payload_task >> fetch_api_data_task >> insert_bq_task
        
        start >> tg >> end
