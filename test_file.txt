import json

# Define a simple SchemaField class to mimic the example
class SchemaField:
    def __init__(self, name, field_type, mode='NULLABLE', fields=None):
        self.name = name
        self.field_type = field_type
        self.mode = mode
        self.fields = fields or []

# List of SchemaField objects, including nested fields
schema_fields = [
    SchemaField("user_id", "INTEGER"),
    SchemaField("user_name", "STRING"),
    SchemaField("email", "STRING"),
    SchemaField("signup_date", "TIMESTAMP"),
    SchemaField("address", "RECORD", fields=[
        SchemaField("street", "STRING"),
        SchemaField("city", "STRING"),
        SchemaField("state", "STRING"),
        SchemaField("zip", "STRING")
    ])
]

# Convert SchemaField objects to a list of dictionaries
def schema_to_dict(fields):
    return [
        {
            "name": field.name,
            "type": field.field_type,
            "mode": field.mode,
            "fields": schema_to_dict(field.fields) if field.fields else None
        } for field in fields
    ]

schema_json = schema_to_dict(schema_fields)

# Save the schema JSON to a file
with open('nested_schema.json', 'w') as f:
    json.dump(schema_json, f, indent=4)

print(json.dumps(schema_json, indent=4))
